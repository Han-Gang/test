local md5 = require('md5')
local log_file = 'mysql.log'

local fh = io.open(log_file, "a+")

function hex_str  (str)
    local len = string.len( str )
    local dump = ""
    local hex = ""
    for i = 1, len do
      local ord = string.byte( str, i )
        hex = hex .. string.format( "%02x", ord )
    end
    return dump .. hex
end
function hex_dump (str)
    local len = string.len( str )
    local dump = ""
    local hex = ""
    local asc = ""
    
    for i = 1, len do
        if 1 == i % 8 then
            dump = dump .. hex .. asc .. "\n"
            hex = string.format( "%04x: ", i - 1 )
            asc = ""
        end
        
        local ord = string.byte( str, i )
        hex = hex .. string.format( "%02x ", ord )
        if ord >= 32 and ord <= 126 then
            asc = asc .. string.char( ord )
        else
            asc = asc .. "."
        end
    end

    
    return dump .. hex
            .. string.rep( "   ", 8 - len % 8 ) .. asc
end


function read_query( packet )
    if string.byte(packet) == proxy.COM_QUERY then
        local query = string.sub(packet, 2)
--        fh:write( string.format("%s %6d	--	%s\n", 
--            os.date('%Y-%m-%d %H:%M:%S'), 
--            proxy.connection.server["thread_id"], 
--            query)) 
        fh:write( "sent:"..   query .. "\n")

        fh:flush()
        proxy.queries:append(1, string.char(proxy.COM_QUERY) .. query, {resultset_is_needed = true})

        return proxy.PROXY_SEND_QUERY
    end
    return
                                                       
end

function read_query_result(inj)
-- print ("lkjljk")
 fh:write("===BEGIN===\nquery: " .. (inj.query ) .. "##END\n")
-- fh:write("query-time: " .. (inj.query_time / 1000) .. "ms")
-- fh:write("response-time: " .. (inj.response_time / 1000) .. "ms")
-- if inj.id == 2 then
--
 local res = assert(inj.resultset)

 local row_count = 0
 if res.affected_rows then
    row_count = res.affected_rows
 else
    local num_cols = string.byte(res.raw, 1)
    if num_cols > 0 and num_cols < 255 then
      for row in inj.resultset.rows do
        row_count = row_count + 1
      end
    end
 end
 fh:write("rowcnt:" .. row_count  .. "\n")
 if res.query_status == proxy.MYSQLD_PACKET_ERR then
    fh:write("ERRORA_MSG:" .. res.raw:sub(10) .. "\n")
    
 end

 if nil ~= inj.resultset.rows then
   local num_cols = string.byte(res.raw, 1)
   local to_write = ""
   local tmp =  ""
   if num_cols > 0 and num_cols < 255 then
   fh:write("colcnti:" .. num_cols .. "\n")
    cnt = 0
--a
      to_write = ""
      for i = 1,num_cols,1 do
          to_write = to_write .. "|".. tostring(inj.resultset.fields[i].name)
      end 
      fh:write("" .. to_write .. "\n")

--    end
    for row in inj.resultset.rows do
      to_write = ""
      cnt = cnt + 1
      for i = 1,num_cols,1 do
        if  (inj.resultset.fields[i].type == proxy.MYSQL_TYPE_GEOMETRY) or (inj.resultset.fields[i].type == proxy.MYSQL_TYPE_BLOB) or (inj.resultset.fields[i].type == proxy.MYSQL_TYPE_LONG_BLOB) or (inj.resultset.fields[i].type == proxy.MYSQL_TYPE_MEDIUM_BLOB) or (inj.resultset.fields[i].type == proxy.MYSQL_TYPE_TINY_BLOB) or (inj.resultset.fields[i].type == proxy.MYSQL_TYPE_BIT)  then
          tmp = tostring(row[i])
          if  string.len(tmp) >= 1000 then
                to_write = to_write .. "|x".. hex_str(string.sub(tmp,1,1000)) ..'__HASH:__' .. md5.sumhexa(tmp) 
          else
                to_write = to_write .. "|x".. hex_str(tmp) -- .. "LEN" .. string.len(tmp)
          end 
--         fh:write("" .. tostring(row[i]) .. "|")a
        else
          tmp = tostring(row[i])

          if  string.len(tmp) >= 2000 then
                to_write = to_write .. "|".. string.sub(tmp,1,2000) ..'__HASH:__' .. md5.sumhexa(tmp)
          else
                to_write = to_write .. "|".. tmp

          end

        end 
      end
--      fh:write("\n----------------\n" .. json.endode(inj.resultset) .."\n ------------- \n")

      fh:write("" .. to_write .. "\n")
--      if cnt > 10 then
--          break
--      end
    end  
   end
 end 
-- fh:write(proxy.MYSQL_TYPE_STRING ..  "\n"  ) -- string
-- fh:write(proxy.MYSQL_TYPE_GEOMETRY .. "\n" )
-- fh:write(proxy.MYSQL_TYPE_BLOB  .. "\n")
-- fh:write(proxy.MYSQL_TYPE_LONG_BLOB  .. "\n")
-- fh:write(proxy.MYSQL_TYPE_MEDIUM_BLOB  .. "\n")
-- fh:write(proxy.MYSQL_TYPE_TINY_BLOB  .. "\n")
-- fh:write(proxy.MYSQL_TYPE_SET  .. "\n") --  string
-- fh:write(proxy.MYSQL_TYPE_BIT  .. "\n")
 fh:write("===END===\n")
 fh:flush()

end
